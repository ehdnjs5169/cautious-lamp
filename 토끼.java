import java.io.IOException;
import java.util.Scanner;

class 토끼{
	//private static Cfunction c = new Cfunction();
	private	int F;
	private int M;
	private int H;
	private int L;
	static int time;
	static int day;
	private boolean D;
	
	Scanner s=new Scanner(System.in);
	Weather W= new Weather();
	
	public 토끼(){
		F=50;
		M=50;
		H=50;
		L=50;
		time=0;
		day=0;
		
		D=false;
	}
	
	void 상태출력(){
		System.out.println(String.format("          포만감 : %3d                   기분  :%3d\n",F,M));
		System.out.println("              ");
		System.out.println(String.format("          건강   : %3d                   질병  :%b\n",H,D));
	}
	void Time(){
		if(time%3==0){
			time=0;
			day++;
			System.out.println(day+"일째 날이 밝았다.");
			System.out.println("오늘 날씨는 "+W.Weather());
		}
		switch(time%3){
			case 0: System.out.println("아침이다. 무었을 할까?");break;
			case 1: System.out.println("점심이다. 무었을 할까?");break;
			case 2: System.out.println("저녁이다. 무었을 할까?");break;
			default: break;
		}
		time++;
		
	}
	int 명령(){
		Time();
		System.out.println("1.산책하기   2.먹이주기   3.놀아주기   4.훈련하기");
		//c.gotoxy(10,29);
		int order=s.nextInt();
		return order;
	}
	
	void 응답(int order)throws IOException, InterruptedException{
		switch(order){
			case 1:
				System.out.println("토끼와 산책을 했다... ");
				System.out.println("                                              ");
				포만감(-5);기분(2);건강(2);애정(1);
				System.out.println(HighState()+LowState());
				break;
			case 2:
				System.out.println("토끼에게 먹이를 줬다...");
		new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│      ~토끼 키우기~                     │\n│                                        │\n│                                        │\n│                                        │\n│〔〕 〔〕             1. 게임 스타트    │\n│〔o w o〕             2. 게임 설명      │\n│〔)   (〕             3. 게임 종료      │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(500);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│〔〕 〔〕                               │\n│〔o w o〕                               │\n│〔)   (〕                               │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(500);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│〔〕 〔〕                               │\n│〔 o wo〕                               │\n│〔)   (〕      *    *    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│      〔〕 〔〕                         │\n│      〔 o _o〕                         │\n│      〔 ) *(〕     *    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│      〔〕 〔〕                         │\n│      〔 - O-〕                         │\n│      〔 ) *(〕     *    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                   A                     │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│      〔〕 〔〕                         │\n│      〔 - ~-〕                         │\n│      〔 )  (〕     *    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│      〔〕 〔〕                         │\n│      〔 o ~o〕                         │\n│      〔 )  (〕     *    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│            〔〕 〔〕                   │\n│            〔 o _o〕                   │\n│            〔 ) *(〕    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│            〔〕 〔〕                   │\n│            〔 - O-〕                   │\n│            〔 ) *(〕    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│            〔〕 〔〕                   │\n│            〔 - ~-〕                   │\n│            〔 )  (〕    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│            〔〕 〔〕                   │\n│            〔 o ~o〕                   │\n│            〔 )  (〕    *    *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                  〔〕 〔〕             │\n│                  〔 o _o〕             │\n│                  〔 ) *(〕   *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                  〔〕 〔〕             │\n│                  〔 - O-〕             │\n│                  〔 ) *(〕   *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                  〔〕 〔〕             │\n│                  〔 - ~-〕             │\n│                  〔 )  (〕   *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                  〔〕 〔〕             │\n│                  〔 o ~o〕             │\n│                  〔 )  (〕   *         │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                        〔〕 〔〕       │\n│                        〔 o _o〕       │\n│                        〔 ) *(〕       │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                        〔〕 〔〕       │\n│                        〔 - O-〕       │\n│                        〔 ) *(〕       │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                        〔〕 〔〕       │\n│                        〔 - ~-〕       │\n│                        〔 )  (〕       │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(300);}catch(Exception e){e.printStackTrace();}
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		System.out.println("┌────────────────────┐\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                                        │\n│                        〔〕 〔〕       │\n│                        〔 o ~o〕       │\n│                        〔 )  (〕       │\n│                                        │\n│                                        │\n└────────────────────┘\n");
		try{Thread.sleep(500);}catch(Exception e){e.printStackTrace();}
				System.out.println("                                              ");
				포만감(8);기분(2);애정(1);
				System.out.println(HighState()+LowState());
				break;
			case 3:
				System.out.println("토끼와 놀아주었다... ");
				System.out.println("                                              ");
				포만감(-10);기분(4);건강(-5);애정(2);
				System.out.println(HighState()+LowState());
				break;
			case 4:
				System.out.println("훈련을 시켰다... ");
				System.out.println("                                              ");
				포만감(-10);기분(-10);건강(1);
				System.out.println(HighState()+LowState());
				break;
			default:
				System.out.println("1~4 선택");
				time--;
				응답(명령());
				break;
		}
	}
	int Full(){return F;}
	int Mood(){return M;}
	int Health(){return H;}
	int Love(){return L;}
	
	//상태값 변화
	void 포만감(int a){
		F=intCheck(F,a);
		if(intLow(F)){
			System.out.println("배가 매우 고프다.");
			기분(-10);
			건강(-10);
			애정(-10);
		}
		
	}
	void 기분(int a){
		M=intCheck(M,a);
		if(intLow(M)){
			System.out.println("기분이 몹시 나쁘다.");
			애정(-10);
		}
	}
	void 건강(int a){
		H=intCheck(H,a);
		if(intLow(H)){
			System.out.println("건강이 안좋다.");
			기분(-10);
			애정(-5);
		}
		if(H*Math.random()<0.5){
			D=true;
			질병();
		}
	}
	void 애정(int a){
		H=intCheck(H,a);
	}
	void 질병(){
		System.out.println("토끼가 병에 걸렸다.");
	}
	void 죽음(){
		System.out.println("토끼가 죽었다...");
	}
	String HighState(){
		if(intMax()==F)
			return "배가 불러보이고, ";
		else if(intMax()==M)
			return "기분이 좋아보이고, ";
		else
			return "건강해 보이고, ";
	}
	String LowState(){
		if(intMin()==F)
			return "배가 고픈것같다.";
		else if(intMin()==M)
			return "기분이 쁜것같다.";
		else
			return "건강이 좋지 않은것같다.";
	}	
	int intCheck(int A,int B){//0~100 판별
		A+=B;
		if(A>100)
			return 100;
		else if(A<0)
			return 0;
		else
			return A;
	}
	boolean intLow(int A){//상태값이 30미만이면 true
			if(A<30)
				return true;
			else
				return false;
	}
	int intMax(){//가장 높은 상태값
		int i=100;
		for(i=100;i>=0;i--){
			if(i==F||i==H||i==M)
				break;
		}
		return i;
	}
	int intMin(){//가장 낮은 상태값
		int i=0;
		for(i=0;i<=100;i++){
			if(i==F||i==H||i==M)
				break;
		}
		return i;
	}
}